name: CI/CD Pipeline  # Nombre del workflow

on:
  push:
    branches:
      - main  # Se ejecuta cuando hay un push a la rama "main"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest  # Usa una máquina virtual con Ubuntu

    steps:
    # Paso 1: Obtener el código del repositorio
    - name: Checkout code
      uses: actions/checkout@v3  # Acción para clonar el repositorio

    # Paso 2: Configurar Docker Buildx (para construir imágenes multi-arch)
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # Paso 3: Iniciar sesión en Docker Hub
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}  # Usuario de Docker Hub
        password: ${{ secrets.DOCKER_HUB_TOKEN }}  # Token de acceso de Docker Hub

    # Paso 4: Construir y subir la imagen de Docker
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .  # Usa el directorio actual como contexto de construcción
        push: true  # Sube la imagen al registro
        tags: tu-usuario-dockerhub/mi-app:latest  # Etiqueta de la imagen

    # Paso 5: Instalar kubectl (para interactuar con Kubernetes)
    - name: Install kubectl
      uses: azure/setup-kubectl@v3

    # Paso 6: Desplegar la aplicación en Minikube
    - name: Deploy to Minikube
      run: |
        kubectl apply -f deployment.yaml  # Aplica el archivo de despliegue
        kubectl apply -f service.yaml  # Aplica el archivo de servicio
